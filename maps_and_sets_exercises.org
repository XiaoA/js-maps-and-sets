#+Title: JS Maps and Sets Exercises
#+AUTHOR: Andrew Buckingham
#+STARTUP: indent
#+OPTIONS: num:nil toc:nil ^:nil
#+FILETAGS: :springboard:

** Quick Question #1 
What does the following code return?

#+begin_src js :tangle question1.js
  new Set([1, 1, 2, 2, 3, 4])

  // Set(4) { 1, 2, 3, 4 }
#+end_src

#+RESULTS:
: Set(4) { 1, 2, 3, 4 }

** Quick Question #2 
What does the following code return?

#+begin_src js :tangle question2.js
  return [...new Set("referee")].join ("")

  // ref
#+end_src

#+RESULTS:
: ref

** Quick Questions #3
What does the Map m look like after running the following code?

#+begin_src js :tangle question3.js
  let m = new Map();
  m.set([1, 2, 3], true);
  m.set([1, 2, 3], false);

  return m;

  // Map(2) { [ 1, 2, 3 ] => true, [ 1, 2, 3 ] => false }
#+end_src

#+RESULTS:
: Map(2) { [ 1, 2, 3 ] => true, [ 1, 2, 3 ] => false }

** hasDuplicate 
Write a function called hasDuplicate which accepts an array and returns true or false if that array contains a duplicate

#+begin_src js :tangle has_duplicate.js
  function hasDuplicate(array) {
    const duplicateSet = new Set(array);
    if (array.length !== duplicateSet.size) {
      return true;
    } else {
      return false;
    }
  };

  hasDuplicate([1, 3, 2, 1]) // true
  hasDuplicate([1, 5, -1, 4]) // false
#+end_src

*** Or, using a function expression/arrow function:

#+begin_src js
  const hasDuplicate = array => new Set(array).size !== array.length
#+end_src
